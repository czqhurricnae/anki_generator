跨主机情况下，一般使用什么通信方式,UDP***TCP***socket file,B,mysql -h host -P port -u user -p psword
什么情况下可以使用 socket file 方式通信,Unix 主机，服务器进程和客户端进程都在同一台主机***同一台主机,A,
以下属于查询请求流程的是,连接管理***解析与优化***域名解析***存储引擎,ABD,
解析与优化中的内容是,查询缓存***语法解析***查询优化***处理连接,ABC,
客户端退出连接时，是否会一定会将线程销毁,是***否,B,
下面语句无法缓存的是,SELECT NOW()***SELECT * FROM user;,A,某些系统函数如 now，无法进行系统缓存
查询缓存在什么情况下会过期,定时过期***表数据有修改过期,B,INSERT UPDATE DELETE TRUNCATE ALTER DROP 将导致表数据缓存过期
现在是否推荐采用查询缓存,是***否,B,缓存有开销，8.0 后移除查询缓存
存储引擎负责的内容,磁盘中记录行信息***从表中读取数据***语法解析***将数据写入具体的物理存储引擎,ABD,
MySQL server 的功能,连接管理***查询缓存***语法解析***查询优化,ABCD,各种不同的存储引擎向上面的 MySQL server 层提供统一的调用接口
常用的存储引擎，其描述正确的是,CSV-存储数据时用逗号分隔***InnoDB-具备外键支持功能的事务存储引擎***MEMORY-内存中的表***MyISAM-非事务存储引擎,ABCD,
支持事务与回滚的数据库是,MEMORY***InnoDB***MyISAM***ARCHIVE,B,
创建表时，设置存储引擎的语句是,CREATE TABLE table_name () ENGINE=engine_name;,A,
启动客户端时，-h 后面添加 ip 地址，通信方式是什么,TCP/IP***socket file***UDP,A,主机 -h 后面如果是 localhost 则是 socket file 通信，如果是 127.0.0.1 则是 TCP/IP 通信
如果我们希望只能本机访问，可以禁止使用 TCP/IP 通信,mysqld --skip-networking,A,mysql 跳过网络请求方式
启动选项方式正确的是,-启动选项***--启动选项=值***--启动选项***--值,BC,--启动选项[=值]
可读取的配置文件路径正确的是,/etc/my.cnf***/etc/mysql/my.cnf***~/.my.cnf***~/.mylogin.cnf***$MYSQL_HOME/my.cnf,ABCDE,MYSQL_HOME 是一个环境变量，该路径下的 my.cnf 配置，只能放启动服务器相关的选项
配置文件中的启动选项会划分成不同的组，以下组正确的是,[server] (具体的启动选项)***[mysqld] (具体的启动选项)***[client](具体的启动选项)***[mysql](具体的启动选项),ABCD,
配置文件中的选项，规则正确的是,option1***--option1***option2 = 1***option2=2,ACD,不需要选项值就直接用 option，选项值就是 option2=value，等号两边可以有空格
配置文件优先级最高的是,/etc/my.cnf***~/.my.cnf***/etc/mysql/my.cnf,B,
存储字符集的含义,建立字符与二进制数据的映射关系,A,
ASCII 字符集收录的字符数，使用几个字节编码,64 个字符，1 个字节编码***128 个字符，1 个字节编码***256 个字符，1 个字节编码***512 个字符，2 个字节编码,B,
一个字节有几位,4***8***12***16,B,
latin1 字符集收录的字符数，使用几个字符编码,64 个字符，1 个字节编码***128 个字符，1 个字节编码***256 个字符，1 个字节编码***512 个字符，2 个字节编码,C,
GB2312 字符集收录的字符数，使用几个字符编码,256 个字符，1 个字节编码***512 个字符，2 个字节编码***7745 个字符，1/2 个字节编码,C,兼容 ASCII 编码，变长编码方式，如果在 ASCII 中，则是 1 个字符，其它 2 个字符
GBK 字符集,在 GB2312 字符集进行扩充，兼容 GB2312,A,
utf8 字符集，以下说法正确的是,收录所有能想到的字符，还在扩充中***兼容 ASCII 字符集***采用变长编码方式***1-4 个字节,ABCD,
utf8mb3 字符集，以下说法正确的是,只能使用 1-3 个字节表示字符***无法存储 emoji 表情***阉割版 utf8***为了节约存储空间***mysql 默认的 utf8 字符集,ABCDE,
utf8mb4 字符集，以下说法正确的是,原版 utf8 字符集***使用 1-4 个字节,AB,
collation 是什么意思,比较规则***集合,A,
collation 的说法正确的是 utf8_general_ci,比较规则名称以其关联的字符集的名称开头***字符集名称后面是作用于哪种语言，general 是通用的规则***后缀表示是否区分重音、大小写,ABC,
比较规则后缀规则正确的是,ai accent insensitive 不区分重音***as accent sensitive 区分重音***ci case insensitive 不区分大小写***cs case sensitive 区分大小写***bin binary 二进制方式比较,ABCDE,
事务的四大特性,原子性-1：事务的全部操作要么全部执行，要么全部不执行***一致性-2：并行事务必须与某一串行执行事务的结果相同。理想中的一致性，需要将所有的事务，顺序执行，但是会有很大的性能损失。所以，一般会用不同的隔离级别来平衡一致性与效率。***隔离性-3：事务执行，不受其它事务的干扰，事务执行的中间结果必须对其它事务透明***持久性-4：已经提交的事务，数据库必须保证变更不被丢失,ABCD,
事务的隔离级别,未提交读 level1：产生脏读，读到其它事务未提交的数据***已提交读 level2：不可重复读，会读到其它事务已经变更的数据，导致前后读取不一致***可重复读 level3：不会读到其它事务更新的数据，但是会读到新插入的数据——幻读***串行化：不会出现脏读、不可重复读、幻读,ABCD,
聚簇索引、非聚簇索引和辅助索引的区别,聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据。一个表只有一个聚簇索引，默认使用主键***辅助索引：索引与数据分开，叶子结构指向数据的主键。辅助索引查完后，需要去聚簇索引查询获取真实数据。***非聚簇索引：数据与索引分开，索引的叶子节点中保存的是数据的地址，myisam***本质区别是，聚簇索引中数据是按照索引字段排序的，非聚簇索引不是,ABC,
应使用聚簇索引的情况,列经常被分组排序-使用***返回某范围内的数据-使用***枚举值-不使用***频繁更新的列-不使用,ABCD,
聚簇索引的优势,索引与数据存放地址相同，读取到索引，即读取到数据地址，不需要再用数据文件中取数据。速度比非聚簇索引快。***使用聚簇索引，当数据地址变更时，辅助索引树不受影响,AB,
聚簇索引的劣势,uuid 做主键，导致插入数据时容易引发数据移动，导致分页。最好使用自增 id，自增 id 是顺序插入数据,A,
索引的实现原理,B+ 树，保证高度可控,,
索引的类型,B+树索引***哈希索引：计算索引字段值的 hashCode，用的是散列算法，所以查询特别快，但是不支持排序和范围查找***全文索引：对于大文本的索引，如果用普通索引，则只能匹配前几个字符。全文索引会生成单词清单，根据单词清单进行索引。Mysql、mongodb 支持中文全文索引，添加了分词工具。,ABC,
乐观锁和悲观锁,悲观锁：总是假设最坏的情况，每次请求数据时，都认为别人会修改数据，于是给数据上锁。悲观锁导致资源只能给一个线程使用。行锁、表锁、读锁、写锁，都是悲观锁。适用于多更新的操作。***乐观锁：总是假设最好的情况，不会给数据加锁，会使用版本号或者 CAS 算法，在更新数据的时候判断数据在此期间，是否有人更新。如果有人更新，则重新执行操作。,AB,
数据库三范式是什么,"第一范式：列的原子性，即列不能再分成其它几列***第二范式：非主键字段，需要完全依赖主键字段。例如订单 orderId productId unitPrice Quantity，其中 unitPrice 就不是依赖于 orderid，于是可以拆分成两个表 order 和 product。主要是用来避免冗余，但是实际设计时，经常会设计冗余字段。***第三范式：任何非主属性不依赖于其它非主属性。订单 CustomerId customerName ，其中 customerName 就依赖了 customerId，有了冗余。
第三范式是第二范式的子集。",ABC,
内连接和外连接的区别,两个表的数据关联时，内连接，如果 B 表中没有数据符合关联，则 A 表数据不返回***外连接，如果 B 表没有数据符合关联，仍返回 A 表数据,AB,
B树和 B+树的区别,B树中每个节点都保存有数据，每个叶子节点间无指针相邻。Mongodb 使用 B 树做索引，因为它是文档型，理想的使用方式是 key + 文档，多表关联的情况比较少，如果多的话应该考虑用 mysql。***B+树，所有数据只存放在叶子节点，每个叶子节点都有链指针，指向下一个节点。MySQL 使用 B+树，因为mysql 是关系型数据库，多表关联多。***B 树在单一查询时，效率更高，但是不适合做遍历操作。***B+树叶子节点用指针相连，做数据遍历很方便。,,